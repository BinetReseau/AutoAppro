package AutoAppro;

import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.util.*;
import java.util.concurrent.locks.*;
import java.util.regex.Pattern;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.DefaultTableModel;

import models.*;
import util.*;

/** The main window handler. */
public class MainWindow
{
	private enum Status
	{
		WAITING_CONTENT,
		WAITING_MISSING,
		WAITING_APPROVAL
	}

	private static final Pattern quantityPattern;
	static {
		quantityPattern = Pattern.compile("\\d+(?:[.,]\\d+)?");
	}

	private static final int SIMILARITY_CHECK_ERROR = 3;

	private static JFrame mainWindow;
	private static JButton retrieveContent, retrieveMissing;
	private static JButton btnDismiss, btnValidate;
	private static JButton btnEdit, btnDelete, btnSearch;
	private static JLabel retrieveStatus, lblProducts;
	private static JTable table;
	private static JList<Product> productList;
	private static volatile String msgStr;
	private static volatile Status status;
	private static HashMap<Serializable, ProviderProduct> currentDelivery;
	
	private static final ReentrantLock productEditLock;
	private static final Condition productEditCondition;
	static {
		productEditLock = new ReentrantLock();
		productEditCondition = productEditLock.newCondition();
	}

	/** The initializing function for the main window. */
	public static Runnable setupGUI = new Runnable()
	{
		@Override
		public void run() {
			/* Content partially generated by WindowBuilder for Eclipse */
			mainWindow = new JFrame(lang("window_title") + AutoAppro.VERSION);
			mainWindow.addWindowListener(new WindowAdapter() {
				@Override
				public void windowClosing(WindowEvent winEvt)
				{
					AutoAppro.saveProducts();
					System.exit(0);
				}
			});
			mainWindow.setIconImage(AutoAppro.icon.getImage());
			mainWindow.setBounds(10, 10, 1000, 700);
			mainWindow.setExtendedState(JFrame.MAXIMIZED_BOTH);
			JMenuBar menuBar = new JMenuBar();
			mainWindow.setJMenuBar(menuBar);
			JMenu mnFile = new JMenu(lang("window_menu_file"));
			menuBar.add(mnFile);
			JMenuItem mntmChangeProvider = new JMenuItem(lang("window_menu_chg_provider"));
			mntmChangeProvider.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent evt) {
					if (AutoAppro.providers.length < 2)
					{
						JOptionPane.showMessageDialog(mainWindow, lang("provider_one"),
								lang("common_error"), JOptionPane.ERROR_MESSAGE);
					} else {
						Object chosen = JOptionPane.showInputDialog(mainWindow, lang("provider_msg"),
								lang("provider_title"), JOptionPane.QUESTION_MESSAGE, AutoAppro.icon,
								AutoAppro.providers, AutoAppro.providers[0]);
						if (chosen == null) return;
						MyPreferences.set("provider", ((Provider) chosen).getName());
						AutoAppro.saveProducts();
						String filename = AutoAppro.class.getProtectionDomain().getCodeSource().getLocation().getPath();
						filename = (new File(filename)).getName();
						try {
							Runtime.getRuntime().exec("java -jar " + filename);
						} catch (IOException e) {
							JOptionPane.showMessageDialog(mainWindow, lang("error_launch") + "\n" +
									lang("error_launch2") + " " + filename,
									lang("common_error"), JOptionPane.ERROR_MESSAGE);
						}
						System.exit(0);
					}
				}
			});
			mnFile.add(mntmChangeProvider);
			JMenuItem mntmChangeLogger = new JMenuItem(lang("window_menu_chg_logger"));
			mntmChangeLogger.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent evt)
				{
					if (AutoAppro.loggers.length < 2)
					{
						JOptionPane.showMessageDialog(mainWindow, lang("logger_one"),
								lang("common_error"), JOptionPane.ERROR_MESSAGE);
					} else {
						Object chosen = JOptionPane.showInputDialog(mainWindow, lang("provider_msg"),
								lang("provider_title"), JOptionPane.QUESTION_MESSAGE, AutoAppro.icon,
								AutoAppro.providers, AutoAppro.providers[0]);
						if (chosen == null) return;
						MyPreferences.set("logger", ((Logger) chosen).getName());
						AutoAppro.saveProducts();
						String filename = AutoAppro.class.getProtectionDomain().getCodeSource().getLocation().getPath();
						filename = (new File(filename)).getName();
						try {
							Runtime.getRuntime().exec("java -jar " + filename);
						} catch (IOException e) {
							JOptionPane.showMessageDialog(mainWindow, lang("error_launch") + "\n" +
									lang("error_launch2") + " " + filename,
									lang("common_error"), JOptionPane.ERROR_MESSAGE);
						}
						System.exit(0);
					}
				}
			});
			mnFile.add(mntmChangeLogger);
			JSeparator separator = new JSeparator();
			mnFile.add(separator);
			JMenuItem mntmExit = new JMenuItem(lang("window_menu_exit"));
			mntmExit.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent evt)
				{
					AutoAppro.saveProducts();
					System.exit(0);
				}
			});
			mnFile.add(mntmExit);
			JMenu mnHelp = new JMenu(lang("window_menu_hm"));
			menuBar.add(mnHelp);
			JMenuItem mntmHelp = new JMenuItem(lang("window_menu_help"));
			mntmHelp.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent evt)
				{
					String url = AutoAppro.displayHelp();
					if (url != null)
					{
						JOptionPane.showMessageDialog(mainWindow, lang("help_content") + "\n" + url,
								lang("help_title"), JOptionPane.INFORMATION_MESSAGE);
					}
				}
			});
			mnHelp.add(mntmHelp);
			JSeparator separator_1 = new JSeparator();
			mnHelp.add(separator_1);
			JMenuItem mntmAbout = new JMenuItem(lang("window_menu_about"));
			mntmAbout.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent evt)
				{
					JOptionPane.showMessageDialog(mainWindow, lang("about_c1") + AutoAppro.VERSION +
							"\n" + lang("about_c2"), lang("about_title"), JOptionPane.INFORMATION_MESSAGE);
				}
			});
			mnHelp.add(mntmAbout);
			JPanel contentPane = new JPanel();
			contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
			contentPane.setLayout(new BorderLayout(0, 0));
			mainWindow.setContentPane(contentPane);
			JSplitPane splitPane = new JSplitPane();
			splitPane.setResizeWeight(0.6);
			contentPane.add(splitPane, BorderLayout.CENTER);
			JPanel panel = new JPanel();
			splitPane.setLeftComponent(panel);
			panel.setLayout(new BorderLayout(0, 0));
			JPanel panel_1 = new JPanel();
			FlowLayout flowLayout = (FlowLayout) panel_1.getLayout();
			flowLayout.setAlignment(FlowLayout.LEADING);
			panel_1.setBorder(new TitledBorder(null, lang("window_retriever_title"),
					TitledBorder.LEADING, TitledBorder.TOP, null, null));
			panel.add(panel_1, BorderLayout.NORTH);
			retrieveContent = new JButton(lang("window_retriever_content"));
			retrieveContent.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent evt)
				{
					String data;
					try {
						data = MyClipBoard.getClipboardText();
					} catch (Exception e) {
						JOptionPane.showMessageDialog(mainWindow, lang("retrieve_error_cb1") + "\n" + e.getMessage(),
								lang("common_error"), JOptionPane.ERROR_MESSAGE);
						return;
					}
					if (data == null)
					{
						JOptionPane.showMessageDialog(mainWindow, lang("retrieve_error_cb2"),
								lang("common_error"), JOptionPane.ERROR_MESSAGE);
						return;
					}
					retrieveStatus.setText(lang("common_loading"));
					disableButtons();
					msgStr = data;
					(new Thread(doManualRetrieval)).start();
				}
			});
			panel_1.add(retrieveContent);
			retrieveMissing = new JButton(lang("window_retriever_missing"));
			retrieveMissing.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent evt)
				{
					String data;
					try {
						data = MyClipBoard.getClipboardText();
					} catch (Exception e) {
						JOptionPane.showMessageDialog(mainWindow, lang("retrieve_error_cb1") + "\n" + e.getMessage(),
								lang("common_error"), JOptionPane.ERROR_MESSAGE);
						return;
					}
					if (data == null)
					{
						JOptionPane.showMessageDialog(mainWindow, lang("retrieve_error_cb2"),
								lang("common_error"), JOptionPane.ERROR_MESSAGE);
						return;
					}
					retrieveStatus.setText(lang("common_loading"));
					disableButtons();
					msgStr = data;
					(new Thread(doMissingRetrieval)).start();
				}
			});
			panel_1.add(retrieveMissing);
			retrieveStatus = new JLabel(lang("common_loading"));
			panel_1.add(retrieveStatus);
			JPanel panel_2 = new JPanel();
			panel_2.setBorder(new TitledBorder(null, lang("window_list_title"),
					TitledBorder.LEADING, TitledBorder.TOP, null, null));
			panel.add(panel_2);
			panel_2.setLayout(new BorderLayout(0, 0));
			JScrollPane tableScroll = new JScrollPane(table = new JTable());
			panel_2.add(tableScroll, BorderLayout.CENTER);
			JPanel panel_5 = new JPanel();
			panel_2.add(panel_5, BorderLayout.SOUTH);
			btnDismiss = new JButton(lang("window_list_dismiss"));
			btnDismiss.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent evt)
				{
					table.setModel(new DefaultTableModel());
					disableButtons();
					retrieveStatus.setText(lang("common_loading"));
					new Thread(startNewDelivery).start();
				}
			});
			panel_5.add(btnDismiss);
			btnValidate = new JButton(lang("window_list_validate"));
			btnValidate.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent evt)
				{
					MyTableModel oldModel = (MyTableModel) table.getModel();
					table.setModel(new DefaultTableModel());
					disableButtons();
					retrieveStatus.setText(lang("common_loading"));
					try {
						String result = oldModel.log();
						if (result == null)
						{
							JOptionPane.showMessageDialog(mainWindow, lang("log_auto"),
									lang("common_info"), JOptionPane.INFORMATION_MESSAGE);
						} else {
							MyClipBoard.setClipboardText(result);
							JOptionPane.showMessageDialog(mainWindow, lang("log_cb"),
									lang("common_info"), JOptionPane.INFORMATION_MESSAGE);
						}
					} catch (Exception e) {
						JOptionPane.showMessageDialog(mainWindow, lang("log_error") + "\n" + e.getMessage(),
								lang("common_error"), JOptionPane.ERROR_MESSAGE);
					}
					new Thread(startNewDelivery).start();
				}
			});
			panel_5.add(btnValidate);
			JPanel panel_3 = new JPanel();
			panel_3.setBorder(new TitledBorder(null, lang("window_products_title"),
					TitledBorder.LEADING, TitledBorder.TOP, null, null));
			splitPane.setRightComponent(panel_3);
			panel_3.setLayout(new BorderLayout(0, 0));
			JPanel panel_4 = new JPanel();
			panel_3.add(panel_4, BorderLayout.NORTH);
			lblProducts = new JLabel();
			panel_4.add(lblProducts);
			btnEdit = new JButton(new ImageIcon(AutoAppro.class.getResource("icon_info.png")));
			btnEdit.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent evt)
				{
					Product myProduct = productList.getSelectedValue();
					if (myProduct == null)
					{
						JOptionPane.showMessageDialog(mainWindow, lang("window_products_nosel"),
								lang("common_error"), JOptionPane.ERROR_MESSAGE);
						return;
					}
					synchronized (AutoAppro.products)
					{
						editProduct(myProduct.providerID, myProduct);
					}
				}
			});
			panel_4.add(btnEdit);
			btnDelete = new JButton(new ImageIcon(AutoAppro.class.getResource("icon_delete.png")));
			btnDelete.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent evt)
				{
					Product myProduct = productList.getSelectedValue();
					if (myProduct == null)
					{
						JOptionPane.showMessageDialog(mainWindow, lang("window_products_nosel"),
								lang("common_error"), JOptionPane.ERROR_MESSAGE);
						return;
					}
					AutoAppro.products.remove(myProduct.providerID);
					AutoAppro.productsModified = true;
					updateProducts();
				}
			});
			panel_4.add(btnDelete);
			btnSearch = new JButton(new ImageIcon(AutoAppro.class.getResource("icon_search.png")));
			btnSearch.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent evt)
				{
					final JDialog dialog = new JDialog(mainWindow, lang("search_title"), true);
					dialog.setBounds(100, 100, 400, 150);
					JPanel inner = new JPanel();
					inner.setLayout(new BoxLayout(inner, BoxLayout.Y_AXIS));
					JPanel searchPanel = new JPanel(new BorderLayout(5, 5));
					searchPanel.add(new JLabel(lang("search_key")), BorderLayout.LINE_START);
					final JTextField search = new JTextField();
					final JComboBox<Product> results = new JComboBox<Product>();
					search.addActionListener(new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent evt)
						{
							if (search.getText().isEmpty())
							{
								results.setModel(new DefaultComboBoxModel<Product>());
								return;
							}
							KeywordChecker checker = new KeywordChecker(search.getText().split(" "));
							Vector<Product> resultList = new Vector<Product>(32);
							for (Product p : AutoAppro.products.values())
							{
								if (checker.check(p.toString()))
									resultList.add(p);
							}
							if (resultList.isEmpty())
							{
								results.setModel(new DefaultComboBoxModel<Product>());
							} else {
								results.setModel(new DefaultComboBoxModel<Product>(resultList));
								results.setSelectedIndex(0);
							}
						}
					});
					searchPanel.add(search, BorderLayout.CENTER);
					inner.add(searchPanel);
					JPanel resultsPanel = new JPanel(new BorderLayout(5, 5));
					resultsPanel.add(new JLabel(lang("search_results")), BorderLayout.LINE_START);
					resultsPanel.add(results, BorderLayout.CENTER);
					inner.add(resultsPanel);
					dialog.add(inner, BorderLayout.PAGE_START);
					JPanel endingButtons = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 5));
					JButton bCancel = new JButton(lang("common_cancel"));
					bCancel.addActionListener(new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent evt)
						{
							dialog.dispose();
						}
					});
					endingButtons.add(bCancel);
					JButton bOK = new JButton(lang("common_ok"));
					bOK.addActionListener(new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent evt)
						{
							Object item = results.getSelectedItem();
							if (item == null)
							{
								JOptionPane.showMessageDialog(dialog, lang("window_products_nosel"),
										lang("common_error"), JOptionPane.ERROR_MESSAGE);
								return;
							}
							productList.setSelectedValue(item, true);
							dialog.dispose();
						}
					});
					endingButtons.add(bOK);
					dialog.add(endingButtons, BorderLayout.PAGE_END);
					dialog.setVisible(true);
				}
			});
			panel_4.add(btnSearch);
			productList = new JList<Product>();
			productList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			panel_3.add(productList, BorderLayout.CENTER);
			updateProducts();
			disableButtons();
		}
	};

	/* Disable all buttons. */
	private static void disableButtons()
	{
		retrieveContent.setEnabled(false);
		retrieveMissing.setEnabled(false);
		btnDismiss.setEnabled(false);
		btnValidate.setEnabled(false);
		btnEdit.setEnabled(false);
		btnDelete.setEnabled(false);
		btnSearch.setEnabled(false);
	}

	/** The displaying function for the main window. */
	public static Runnable displayGUI = new Runnable()
	{
		@Override
		public void run() {
			mainWindow.setVisible(true);
			(new Thread(startNewDelivery)).start();
		}
	};

	/* The retriever that is used to retrieve the product list. */
	private static Retriever retriever = new Retriever()
	{
		@Override
		public void addProduct(Serializable providerID, double quantity, int price)
		{
			Product currentProduct = getProduct(providerID);
			if (currentProduct == null) return;
			ProviderProduct result = new ProviderProduct(), currentRecord;
			switch (currentProduct.type)
			{
			case OPEN:
				return;
			case NORMAL:
				result.quantity = currentProduct.mult * quantity;
				break;
			case CONSTANT_QTT:
				result.quantity = currentProduct.mult;
				break;
			case ASK_QTT:
				do {
					msgStr = providerID.toString();
					try {
						SwingUtilities.invokeAndWait(askQuantity);
					} catch (Exception e) {}
				} while ((msgStr != null) && (!quantityPattern.matcher(msgStr).matches()));
				if (msgStr == null) return;
				msgStr = msgStr.replace(',', '.');
				result.quantity = currentProduct.mult * Double.parseDouble(msgStr);
				break;
			case ROUND_QTT:
				result.quantity = (double) Math.round(currentProduct.mult * quantity);
				break;
			}
			result.price = price;
			synchronized (currentDelivery)
			{
				currentRecord = currentDelivery.get(providerID);
				if (currentRecord != null)
				{
					currentRecord.quantity += result.quantity;
					currentRecord.price += result.price;
				} else {
					result.providerID = providerID;
					currentDelivery.put(providerID, result);
				}
			}
		}
	};

	/* Ask the quantity for a product. */
	private static Runnable askQuantity = new Runnable()
	{
		@Override
		public void run() {
			msgStr = JOptionPane.showInputDialog(mainWindow, lang("ask_qtt_title"),
					lang("ask_qtt_content") + " " + msgStr + "\n" + lang("ask_qtt_content2"),
					JOptionPane.QUESTION_MESSAGE);
			if ((msgStr != null) || (!quantityPattern.matcher(msgStr).matches()))
			{
				JOptionPane.showMessageDialog(mainWindow, lang("error_number_format"),
						lang("common_error"), JOptionPane.ERROR_MESSAGE);
			}
		}
	};

	/* Get the product from the providerID, or create a new one if necessary (non-GUI thread). */
	private static Product getProduct(Serializable productID)
	{
		final Serializable productIDCopy = productID;
		Product result;
		synchronized (AutoAppro.products)
		{
			if ((result = AutoAppro.products.get(productID)) == null)
			{
				/* Try to find another that has a similar name */
				for (Product p : AutoAppro.products.values())
				{
					if (SimilarityChecker.isSimilarDel(productID.toString(), p.toString(), SIMILARITY_CHECK_ERROR))
					{
						msgStr = lang("sim_content1") + " " + productID.toString() + "\n" +
								lang("sim_content2") + " " + p.toString();
						while ((msgStr != null) && (!msgStr.equals("yes")))
						{
							try {
								SwingUtilities.invokeAndWait(askSimilar);
							} catch (Exception e) {}
						}
						if (msgStr != null)
						{
							Product newProduct = new Product();
							newProduct.providerID = productID;
							newProduct.type = p.type;
							newProduct.barID = p.barID;
							newProduct.mult = p.mult;
							AutoAppro.products.put(productID, newProduct);
							AutoAppro.productsModified = true;
							try {
								SwingUtilities.invokeAndWait(new Runnable() {
									@Override
									public void run()
									{
										updateProducts();
									}
								});
							} catch (Exception e) {
								e.printStackTrace();
							}
							return newProduct;
						}
					}
				}
				/* Else, ask */
				SwingUtilities.invokeLater(new Runnable() {
					@Override
					public void run()
					{
						editProduct(productIDCopy, null);
					}
				});
				productEditLock.lock();
				productEditCondition.awaitUninterruptibly();
				productEditLock.unlock();
				try {
					SwingUtilities.invokeAndWait(new Runnable() {
						@Override
						public void run()
						{
							updateProducts();
						}
					});
				} catch (Exception e) {
					e.printStackTrace();
				}
				result = AutoAppro.products.get(productID);
			}
		}
		return result;
	}

	/* Ask the similarity question that is in msgStr, and put "yes" or null in it in response. */
	private static Runnable askSimilar = new Runnable()
	{
		@Override
		public void run()
		{
			int answer = JOptionPane.showConfirmDialog(mainWindow, msgStr, lang("sim_title"),
					JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
			if (answer == JOptionPane.YES_OPTION)
				msgStr = "yes";
			else
				msgStr = null;
		}
	};

	/* Edit the corresponding product, or create it if it is not already in the HashMap */
	private static void editProduct(Serializable productID, Product currentProduct)
	{
		final boolean isNewProduct = (currentProduct == null);
		final Product myProduct = currentProduct;
		final Serializable myProductID = productID;
		final JDialog dialog = new JDialog(mainWindow, lang("product_title"), true);
		dialog.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
		dialog.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent winEvt)
			{
				if (!isNewProduct)
					dialog.dispose();
			}
		});
		dialog.setBounds(100, 100, 700, 300);
		JPanel center = new JPanel();
		center.setLayout(new BoxLayout(center, BoxLayout.Y_AXIS));
		JPanel productNamePanel = new JPanel(new BorderLayout());
		productNamePanel.add(new JLabel(lang("product_name") + " " + productID.toString()), BorderLayout.CENTER);
		center.add(productNamePanel);
		JPanel fields = new JPanel(new GridLayout(0, 2, 0, 5));
		fields.add(new JLabel(lang("product_type")));
		final JComboBox<ProductType> productType = new JComboBox<ProductType>(ProductType.values());
		if (!isNewProduct)
			productType.setSelectedItem(currentProduct.type);
		else
			productType.setSelectedItem(ProductType.NORMAL);
		fields.add(productType);
		fields.add(new JLabel(lang("product_mult")));
		double defaultMult = isNewProduct ? 1 : currentProduct.mult;
		final JTextField productMult = new JTextField(Double.toString(defaultMult));
		fields.add(productMult);
		center.add(fields);
		int defaultBarID;
		if (isNewProduct)
		{
			defaultBarID = 1;
			for (Product p : AutoAppro.products.values())
			{
				if (defaultBarID <= p.barID)
					defaultBarID = p.barID + 1;
			}
		} else {
			defaultBarID = currentProduct.barID;
		}
		final LoggerPanel loggerPanel = AutoAppro.logger.getLoggerPanel(
				defaultBarID, productID.toString());
		if (!isNewProduct)
			loggerPanel.setBarID(defaultBarID);
		center.add(loggerPanel);
		dialog.add(center, BorderLayout.PAGE_START);
		JPanel endingPanel = new JPanel();
		endingPanel.setLayout(new BoxLayout(endingPanel, BoxLayout.Y_AXIS));
		JPanel getFromPanel = new JPanel(new BorderLayout(5, 0));
		getFromPanel.add(new JLabel(lang("product_from")), BorderLayout.LINE_START);
		Vector<Product> data = new Vector<Product>(AutoAppro.products.values());
		Collections.sort(data);
		final JComboBox<Product> loadFromList = new JComboBox<Product>(data);
		getFromPanel.add(loadFromList, BorderLayout.CENTER);
		JButton loadFrom = new JButton(lang("product_load"));
		loadFrom.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				Object fromObj = loadFromList.getSelectedItem();
				if (fromObj == null)
				{
					JOptionPane.showMessageDialog(dialog, lang("window_products_nosel"),
							lang("common_error"), JOptionPane.ERROR_MESSAGE);
					return;
				}
				Product selProduct = (Product) fromObj;
				productType.setSelectedItem(selProduct.type);
				productMult.setText(Double.toString(selProduct.mult));
				loggerPanel.setBarID(selProduct.barID);
			}
		});
		getFromPanel.add(loadFrom, BorderLayout.LINE_END);
		endingPanel.add(getFromPanel);
		JPanel validationPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 5));
		JButton cancel = new JButton(lang("common_cancel"));
		cancel.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent evt)
			{
				dialog.dispose();
				if (isNewProduct)
				{
					productEditLock.lock();
					productEditCondition.signal();
					productEditLock.unlock();
				}
			}
		});
		validationPanel.add(cancel);
		JButton validate = new JButton(lang("common_ok"));
		validate.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				if (!quantityPattern.matcher(productMult.getText()).matches())
				{
					JOptionPane.showMessageDialog(dialog, lang("error_number_format"),
							lang("common_error"), JOptionPane.ERROR_MESSAGE);
					return;
				}
				double multValue = Double.parseDouble(productMult.getText());
				int id = loggerPanel.getBarID();
				if (isNewProduct)
				{
					Product toAdd = new Product();
					toAdd.providerID = myProductID;
					toAdd.type = (ProductType) productType.getSelectedItem();
					toAdd.mult = multValue;
					toAdd.barID = id;
					AutoAppro.products.put(myProductID, toAdd);
					AutoAppro.productsModified = true;
					dialog.dispose();
					productEditLock.lock();
					productEditCondition.signal();
					productEditLock.unlock();
				} else {
					myProduct.type = (ProductType) productType.getSelectedItem();
					myProduct.mult = multValue;
					myProduct.barID = id;
					AutoAppro.productsModified = true;
					dialog.dispose();
				}
			}
		});
		validationPanel.add(validate);
		endingPanel.add(validationPanel);
		dialog.add(endingPanel, BorderLayout.PAGE_END);
		dialog.setVisible(true);
	}

	/* Start a new delivery (non-GUI thread). */
	private static Runnable startNewDelivery = new Runnable()
	{
		@Override
		public void run() {
			currentDelivery = new HashMap<Serializable, ProviderProduct>();
			msgStr = null;
			if (AutoAppro.provider.tryAutomaticRetrieve())
				status = Status.WAITING_APPROVAL;
			else
				status = Status.WAITING_CONTENT;
			SwingUtilities.invokeLater(updateGUI);
		}
	};

	/* update the GUI according to the current situation. */
	private static Runnable updateGUI = new Runnable()
	{
		@Override
		public void run() {
			switch (status)
			{
			case WAITING_CONTENT:
				if (msgStr != null)
				{
					JOptionPane.showMessageDialog(mainWindow, lang("retrieve_error_content") + "\n" + msgStr,
							lang("common_error"), JOptionPane.ERROR_MESSAGE);
				}
				retrieveContent.setEnabled(true);
				retrieveStatus.setText(lang("status_need_content"));
				break;
			case WAITING_MISSING:
				if (msgStr != null)
				{
					JOptionPane.showMessageDialog(mainWindow, lang("retrieve_error_content") + "\n" + msgStr,
							lang("common_error"), JOptionPane.ERROR_MESSAGE);
				}
				retrieveMissing.setEnabled(true);
				retrieveStatus.setText(lang("status_need_missing"));
				break;
			case WAITING_APPROVAL:
				(new Thread(updateDelivery)).start();
				return;
			}
			btnEdit.setEnabled(true);
			btnDelete.setEnabled(true);
			btnSearch.setEnabled(true);
		}
	};

	/* Retrieve the contents data from the local variable msgStr (non-GUI thread). */
	private static Runnable doManualRetrieval = new Runnable()
	{
		@Override
		public void run() {
			try {
				AutoAppro.provider.retrieveFromString(msgStr);
			} catch (IllegalArgumentException e) {
				msgStr = e.getMessage();
				SwingUtilities.invokeLater(updateGUI);
				return;
			}
			if (AutoAppro.provider.useMissingList())
				status = Status.WAITING_MISSING;
			else
				status = Status.WAITING_APPROVAL;
			msgStr = null;
			SwingUtilities.invokeLater(updateGUI);
		}
	};

	/* Retrieve the missing products data from the local variable msgStr (non-GUI thread). */
	private static Runnable doMissingRetrieval = new Runnable()
	{
		@Override
		public void run() {
			try {
				AutoAppro.provider.retrieveMissing(msgStr);
			} catch (IllegalArgumentException e) {
				msgStr = e.getMessage();
				SwingUtilities.invokeLater(updateGUI);
				return;
			}
			status = Status.WAITING_APPROVAL;
			msgStr = null;
			SwingUtilities.invokeLater(updateGUI);
		}
	};

	/* Update the list of the products in the delivery (non-GUI thread). */
	private static Runnable updateDelivery = new Runnable()
	{
		@Override
		public void run() {
			AutoAppro.provider.getItems(retriever);
			SwingUtilities.invokeLater(deliveryUpdated);
		}
	};

	/* At the end of the delivery update. */
	private static Runnable deliveryUpdated = new Runnable()
	{
		@Override
		public void run() {
			if (currentDelivery.isEmpty())
			{
				retrieveStatus.setText(lang("status_nothing"));
				btnEdit.setEnabled(true);
				btnDelete.setEnabled(true);
				btnSearch.setEnabled(true);
				return;
			}
			table.setModel(new MyTableModel(currentDelivery.values()));
			btnDismiss.setEnabled(true);
			btnValidate.setEnabled(true);
			btnEdit.setEnabled(true);
			btnDelete.setEnabled(true);
			btnSearch.setEnabled(true);
			retrieveStatus.setText(lang("status_ok"));
		}
	};

	/* Just a little shortcut ... */
	private static String lang(String keyword)
	{
		return AutoAppro.messages.getString(keyword);
	}

	/** Update the list of products for the current provider. */
	public static void updateProducts()
	{
		Vector<Product> data = new Vector<Product>(AutoAppro.products.values());
		Collections.sort(data);
		productList.setListData(data);
		lblProducts.setText(Integer.toString(data.size()) + " " + lang("window_products_qtt"));
	}
}
